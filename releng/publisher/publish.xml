<!--
    Copyright (c) 2011, 2013 Gunnar Wagenknecht and others.
    All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v1.0 which accompanies this distribution,
    and is available at http://www.eclipse.org/legal/epl-v10.html.

    Contributors:
        Gunnar Wagenknecht - initial API and implementation
 -->
<project name="publish-gyrex-buildresults" default="main">

  <description>Publishes Gyrex build results on Eclipse.org</description>

  <!-- define builder home and work dir -->
  <dirname file="${ant.file.publish-gyrex-buildresults}" property="builder" />
  <property name="buildDirectory" location="${builder}/target/publisher" />

  <!-- load properties from the outer Maven build -->
  <property name="build-variables.properties" location="${builder}/target/classes/build-variables.properties" />
  <available property="build-variables.properties.exists" file="${build-variables.properties}" />
  <fail unless="build-variables.properties.exists" message="build-variables.properties not found; do not invoke directly but only from outer Maven build" />
  <property file="${build-variables.properties}" />

  <!-- define where the build results are located -->
  <property name="buildResultsRepo" location="${builder}/../repository/target" />
  <property name="buildResultsProducts" location="${builder}/products/target/products" />

  <!-- ==================================================================================
          target: main
         ================================================================================== -->
  <target name="main" description="Publishes the build results">
    <fail unless="publishRepoStream" message="property publishRepoStream not set" />

    <!-- print build information -->
    <echo message="Publishing Gyrex build: ${buildLabel}" />

    <!-- ensure the working directory exists -->
    <mkdir dir="${buildDirectory}/${buildLabel}" />

    <!-- initialize publish target based on buildType -->
    <condition property="publishRepoBasePath" value="/gyrex/${publishRepoStream}">
      <equals arg1="${buildType}" arg2="R" />
    </condition>
    <condition property="publishRepoBasePath" value="/gyrex/${publishRepoStream}/milestones">
      <equals arg1="${buildType}" arg2="S" />
    </condition>
    <condition property="publishRepoBasePath" value="/gyrex/${publishRepoStream}/integration">
      <equals arg1="${buildType}" arg2="I" />
    </condition>
    <condition property="publishRepoBasePath" value="/gyrex/${publishRepoStream}/maintenance">
      <equals arg1="${buildType}" arg2="M" />
    </condition>
    <property name="publishRepoBasePath" value="/gyrex/${publishRepoStream}/builds" />

    <!-- generate additional publishing files (html pages & stuff) -->
    <antcall target="generateAddtionalFilesToPublish" />

    <!-- publish to eclipse.org downloads area -->
    <antcall target="publishToDownloadArea" />
  </target>

  <!-- generates additional publishing files -->
  <target name="generateAddtionalFilesToPublish">
    <fail unless="publishRepoStream" message="property publishRepoStream not set" />
    <fail unless="publishRepoBasePath" message="property publishRepoBasePath not set" />

    <!-- give the build type a better name -->
    <condition property="buildTypeName" value="Release">
      <equals arg1="${buildType}" arg2="R" />
    </condition>
    <condition property="buildTypeName" value="Stable Build">
      <equals arg1="${buildType}" arg2="S" />
    </condition>
    <condition property="buildTypeName" value="Integration Build">
      <equals arg1="${buildType}" arg2="I" />
    </condition>
    <condition property="buildTypeName" value="Maintenance Build">
      <equals arg1="${buildType}" arg2="M" />
    </condition>
    <property name="buildTypeName" value="Build" />

    <!-- generate build index html -->
    <copy file="${builder}/template-eclipse.org/build-index.html" tofile="${buildDirectory}/${buildLabel}/index.html">
      <filterset>
        <filter token="BUILD_TYPE" value="${buildTypeName}" />
        <filter token="BUILD_ID" value="${buildId}" />
        <filter token="BUILD_LABEL" value="${buildLabel}" />
        <filter token="BUILD_PATH" value="${publishRepoBasePath}/${buildLabel}" />
        <filter token="SERVER_ARCHIVE_PREFIX" value="${archiveNamePrefix}" />
        <filter token="REPO_ARCHIVE_PREFIX" value="${archiveNamePrefix}" />
      </filterset>
    </copy>

    <!-- copy p2.index file -->
    <copy file="${builder}/template-eclipse.org/p2.index" tofile="${buildDirectory}/${buildLabel}/p2.index" />
  </target>

  <!-- publish bits to download area -->
  <target name="publishToDownloadArea" unless="skipPublish">

    <!-- note: actually we just publish to a staging area;
                   a separate cron job rsyncs stuff from there
                   to download.eclipse.org -->

    <!-- check if we have *local* access on eclipse.org -->
    <condition property="publishToDownloadAreaIsPossible">
      <and>
        <!-- composite repo location must exist -->
        <available file="${publishBaseDirectory}" type="dir" />

        <!-- build type must be allowed for publishing -->
        <or>
          <equals arg1="${buildType}" arg2="S" />
          <equals arg1="${buildType}" arg2="R" />
          <!-- note, we do publish those as well but we also need to clean-up old builds regulary -->
          <equals arg1="${buildType}" arg2="I" />
          <equals arg1="${buildType}" arg2="M" />
        </or>
      </and>
    </condition>

    <!-- mirror repo -->
    <antcall target="mirrorToPublishTarget" />

    <!-- copy artifacts -->
    <antcall target="copyArtifactsToPublishTarget" />

    <!-- fix file permissions -->
    <antcall target="fixFilePermissionsOfPublishTarget" />

  </target>

  <!-- mirrors p2 repository to download area -->
  <target name="mirrorToPublishTarget" if="publishToDownloadAreaIsPossible">
    <fail unless="publishBaseDirectory" message="property publishBaseDirectory not set" />
    <fail unless="publishRepoStream" message="property publishRepoStream not set" />
    <fail unless="publishRepoBasePath" message="property publishRepoBasePath not set" />

    <!-- generate all the relevant urls -->
    <mkdir dir="${buildDirectory}/publishRepoTemplate" />
    <mkdir dir="${publishBaseDirectory}${publishRepoBasePath}" />
    <mkdir dir="${publishBaseDirectory}${publishRepoBasePath}/${buildLabel}" />
    <makeurl property="templateRepoUrl" file="${buildDirectory}/publishRepoTemplate" />
    <makeurl property="publishBuildRepoUrl" file="${publishBaseDirectory}${publishRepoBasePath}/${buildLabel}" />
    <makeurl property="publishCompositeRepoUrl" file="${publishBaseDirectory}${publishRepoBasePath}" />
    <makeurl property="buildResultRepoUrl" file="${buildResultsRepo}/repository" />


    <!-- generate template with proper mirror urls -->
    <copy file="${builder}/template-eclipse.org/artifacts.xml" tofile="${buildDirectory}/publishRepoTemplate/artifacts.xml">
      <filterset>
        <filter token="REPO_NAME" value="Gyrex Repository (Build ${buildId})" />
        <filter token="REPO_PATH" value="${publishRepoBasePath}/${buildLabel}" />
      </filterset>
    </copy>

    <!-- mirror to target (but only the bits that really changed) -->
    <p2.mirror log="${buildDirectory}/${buildLabel}/publish-repo.log" ignoreErrors="true">
      <source location="${resultRepoLocationUrl}" />
      <destination compressed="true" name="Gyrex Repository (Build ${buildId})" location="${publishBuildRepoUrl}" append="true" format="${resultRepoLocationUrl}" kind="metadata" />
      <destination compressed="true" name="Gyrex Repository (Build ${buildId})" location="${publishBuildRepoUrl}" append="true" format="${templateRepoUrl}" kind="artifact" />
      <comparator comparator="org.eclipse.equinox.p2.repository.tools.jar.comparator" comparatorLog="${buildDirectory}/${buildLabel}/publish-repo-compare.log">
        <!-- compare against the existing composite to not mirror duplicate bits -->
        <repository location="${publishCompositeRepoUrl}" />
      </comparator>
      <!-- mirror only what's defined in features -->
      <slicingoptions followStrict="true" latestversiononly="true" />
    </p2.mirror>

    <!-- add to composite repo -->
    <p2.composite.repository failonexists="false">
      <repository location="${publishCompositeRepoUrl}" name="Gyrex Repository (${publishRepoStream} builds)" description="Composite repository with references to all ${publishRepoStream} builds." compressed="true" />
      <add>
        <repository location="${buildLabel}" kind="M" />
        <repository location="${buildLabel}" kind="A" />
      </add>
    </p2.composite.repository>

    <!-- generate composite repo index html using our helper online php -->
    <unjar src="${publishBaseDirectory}${publishRepoBasePath}/compositeContent.jar" dest="${buildDirectory}/publishRepoTemplate" overwrite="true" />
    <available file="${buildDirectory}/publishRepoTemplate/compositeContent.xml" property="compositeContentXmlAvailable" />
    <fail unless="compositeContentXmlAvailable" message="compositeContent.xml not available" />
    <delete file="${publishBaseDirectory}${publishRepoBasePath}/index.html" failonerror="false" />
    <property name="publishRepoIndexGeneratorUrl" value="http://www.eclipse.org/gyrex/download/helpers/repo-index.php" />
    <property name="generatePublishRepoIndexCommand" value="cat '${buildDirectory}/publishRepoTemplate/compositeContent.xml' | curl -X POST -H 'Content-type: text/xml' -o '${publishBaseDirectory}${publishRepoBasePath}/index.html' -d @- '${publishRepoIndexGeneratorUrl}?buildType=${buildType}&amp;repoPath=${publishRepoBasePath}'" />
    <echo message="Generating repository index.html using: ${generatePublishRepoIndexCommand}" />
    <exec executable="/bin/bash">
      <arg value="-c" />
      <arg value="${generatePublishRepoIndexCommand}" />
    </exec>
    <available file="${publishBaseDirectory}${publishRepoBasePath}/index.html" property="repoIndexHtmlGenerated" />
    <fail unless="repoIndexHtmlGenerated" message="index.html generation failed" />

  </target>

  <!-- copy artifacts to download area -->
  <target name="copyArtifactsToPublishTarget" if="publishToDownloadAreaIsPossible">
    <fail unless="publishRepoStream" message="property publishRepoStream not set" />
    <fail unless="publishRepoBasePath" message="property publishRepoBasePath not set" />

    <!-- copy everything from build label directory -->
    <copy todir="${publishBaseDirectory}${publishRepoBasePath}/${buildLabel}" includeemptydirs="false">
      <fileset dir="${buildDirectory}/${buildLabel}" />
      <fileset dir="buildResultsProducts">
        <include name="*.gz" />
        <include name="*.zip" />
      </fileset>
      <fileset dir="buildResultsRepo">
        <include name="*.zip" />
      </fileset>
    </copy>
  </target>

  <!-- fix file permissions in download area -->
  <target name="fixFilePermissionsOfPublishTarget" if="publishToDownloadAreaIsPossible">
    <fail unless="publishBaseDirectory" message="property publishBaseDirectory not set" />
    <fail unless="publishRepoBasePath" message="property publishRepoBasePath not set" />
    <fail unless="buildLabel" message="property buildLabel not set" />

    <!-- set proper group writable -->
    <!-- (note doesn't work because the builder isn't in that group)
		<exec executable="/bin/bash">
			<arg value="-c"/>
			<arg value="chgrp technology.gyrex -R '${publishBaseDirectory}${publishRepoBasePath}'"/>
		</exec>
		-->

    <!-- update file permissions to ensure group writable -->
    <exec executable="/bin/bash">
      <arg value="-c" />
      <arg value="chmod g+w -R '${publishBaseDirectory}${publishRepoBasePath}'" />
    </exec>
  </target>


</project>