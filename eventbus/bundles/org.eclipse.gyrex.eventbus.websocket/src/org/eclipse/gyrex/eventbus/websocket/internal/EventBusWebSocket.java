/**
 * Copyright (c) 2014 AGETO Service GmbH and others.
 * All rights reserved.
 *
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Andreas Mihm - initial API and implementation
 */
package org.eclipse.gyrex.eventbus.websocket.internal;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.gyrex.cloud.admin.ICloudManager;

import org.eclipse.jetty.websocket.api.RemoteEndpoint;
import org.eclipse.jetty.websocket.api.Session;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;
import org.eclipse.jetty.websocket.api.annotations.WebSocket;
import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 * This class will be registered with the {@link WebSocketServletFactory} and
 * will be connected by other nodes of the cluster. Through this websocket
 * connection Events will only be sent out but not received.
 * 
 * @author mihm
 */
@SuppressWarnings("restriction")
@WebSocket
public class EventBusWebSocket {

	private final Gson gson;
	private final String localNodeId;

	private final Set<Session> sessions = new HashSet<Session>();
	private final WebsocketEventTransport transportService;

	public EventBusWebSocket(final WebsocketEventTransport transportService) {
		gson = new GsonBuilder().create();
		final ICloudManager cloudManager = ClusterEventsActivator.getInstance().getCloudManager();
		localNodeId = cloudManager.getLocalInfo().getNodeId();
		this.transportService = transportService;
	}

	@OnWebSocketClose
	public void onClose(final Session oldSession, final int closeCode, final String closeReason) {
		sessions.remove(oldSession);

	}

	@OnWebSocketConnect
	public void onConnect(final Session newSession) {
		sessions.add(newSession);
	}

	@OnWebSocketError
	public void onError(final Session session, final Throwable cause) {
		cause.printStackTrace();
	}

	@OnWebSocketMessage
	public void onMessage(final Session session, final String text) {
		// no messages accepted yet
		System.out.println("MESSAGE RECEIVED: " + text);

	}

	/**
	 * This method sends the {@link TransportableEvent} out on the websocket and
	 * distributes it to all listeners currently connected to this websocket.
	 * Since websocket connections can get lost, it's not guaranteed that all
	 * events reach all nodes of the gyrex cluster
	 * 
	 * @param event
	 */
	public void sendEvent(final TransportableEvent event) {
		try {
			// only distribute events generated by this node
			if (localNodeId.equals(event.getNodeId())) {
				writeMessage(gson.toJson(event));
			}
		} catch (final IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void writeMessage(final String message) throws IOException {
		for (final Session session : sessions) {
			final RemoteEndpoint remote = session.getRemote();
			remote.sendString(message);
		}
	}
}
